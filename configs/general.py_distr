# -*- coding: utf-8 -*-
"""
    Настройки проекта

    :copyright: (c) 2013 by Pavel Lyashkov.
    :license: BSD, see LICENSE for more details.
"""

from celery.schedules import crontab


class Config():
    DEBUG = False
    TESTING = False

    SECRET_KEY = 'F\x03Dk\x1f@\xaa_5{\xf5m\xf2\x99\x9e\x1c\n\xe7{\xfb\x8aQ\xdae'

    CACHE_TYPE = 'RedisCache'
    CACHE_REDIS_HOST = 'localhost'
    CACHE_REDIS_PORT = 6379
    CACHE_REDIS_DB = 1

    CACHE_DEFAULT_TIMEOUT = 50
    CACHE_THRESHOLD = 2048

    TZ = 'Europe/Moscow'

    ARCHIV_PATH = './archiv'
    TMP_PACH = './tmp'
    REPORT_TMP_PACH = './%s/tmp' % TMP_PACH
    EXCEL_FOLDER = './%s/excel' % TMP_PACH
    IMG_FOLDER = './%s/img' % TMP_PACH
    TERM_LOG_PATH = './logs/term'
    IMPORT_EXTENSIONS = set(['xls', 'xlsx'])
    IMG_EXTENSIONS = set(['jpg', 'png'])
    MAX_CONTENT_LENGTH = 16 * 1024 * 1024
    MAX_IMG_LENGTH = 16 * 1024 * 1024

    MAIL_DEFAULT_SENDER = "no-reply@mobispot.com"
    MAIL_SERVER = '127.0.0.1'
    MAIL_PORT = 25
    MAIL_USE_TLS = False
    MAIL_USE_SSL = False
    MAIL_USERNAME = None
    MAIL_PASSWORD = None
    DEFAULT_MAIL_SENDER = None

    PDF_FOLDER = './%s/pdf' % TMP_PACH    
    PDF_FONT = './account_data/fonts/Ubuntu-L.ttf'
    PDF_GENERAL_MANAGER = u'Радаев И. Н.'
    PDF_CHIEF_ACCOUNTANT = u'Радаев И. Н.'
    PDF_GENERAL_MANAGER_SIGN = './account_data/img/general_manager_sign.jpg'
    PDF_CHIEF_ACCOUNTANT_SIGN = './account_data/img/chief_accountant_sign.jpg'
    PDF_STAMP = './account_data/img/mobispot_stamp.jpg'

    SQLALCHEMY_BINDS = {
        'term': 'mysql://user:pass@localhost/term?charset=utf8',
        'stack': 'mysql://user:pass@localhost/stack?charset=utf8',
        'payment': 'mysql://user:pass@localhost/payment?charset=utf8',
        'mobispot': 'mysql://user:pass@localhost/mobispot?charset=utf8'
    }

    SECRET_KEY = 'test'

    LANGUAGES = {
        'en': 'English',
        'ru': 'Russian'
    }

    COOKIE_NAME = ""
    COOKIE_HTTPONLY = True
    COOKIE_SECURE = "strong"
    SESSION_PROTECTION = "strong"
    REMEMBER_COOKIE_NAME = ""

    USE_CELERY = True
    CELERY_BROKER_URL = 'redis://localhost:6379/0'
    CELERY_RESULT_BACKEND = 'redis://localhost:6379/1'

    CELERY_TIMEZONE='Europe/Moscow',
    CELERYBEAT_SCHEDULE={
        'empty-recovery-limit-day': {
            'task': 'web.tasks.corp_wallet.recovery_limit',
            'schedule': crontab(hour=0, minute=11),
            'args': ('1',),
        },
        'empty-recovery-limit-wheek': {
            'task': 'web.tasks.corp_wallet.recovery_limit',
            'schedule': crontab(hour=0, minute=11, day_of_week=1),
            'args': ('2',),
        },
        'empty-recovery-limit-month': {
            'task': 'web.tasks.corp_wallet.recovery_limit',
            'schedule': crontab(hour=0, minute=22, day_of_month=1),
            'args': ('3',),
        },
        'report-sender': {
            'task': 'web.tasks.report_send.report_manager',
            'schedule': crontab(minute='*/1'),
            'args': ('0',),
        },
        'report-sender-day': {
            'task': 'web.tasks.report_send.report_manager',
            'schedule': crontab(hour=10, minute=11),
            'args': ('1',),
        },
        'report-sender-wheek': {
            'task': 'web.tasks.report_send.report_manager',
            'schedule': crontab(hour=10, minute=10, day_of_week=1),
            'args': ('2',),
        },
        'report-sender-month': {
            'task': 'web.tasks.report_send.report_manager',
            'schedule': crontab(hour=10, minute=25, day_of_month=1),
            'args': ('3',),
        },
        'alarm-sender': {
            'task': 'web.tasks.alarms_send.alarm_manager',
            'schedule': crontab(minute='*/1'),
            'args': (),
        },
        'soc_sharing_checker': {
            'task': 'web.tasks.soc_sharing.sharing_manager',
            'schedule': crontab(minute='*/1'),
            'args': (),
        },
        'payment_check_linking': {
            'task': 'web.tasks.payment.check_linking_manager',
            'schedule': crontab(minute='*/1'),
            'args': (),
        },
        'payment_check': {
            'task': 'web.tasks.payment.payment_manager',
            'schedule': crontab(minute='*/1'),
            'args': (),
        },
        #'soc_sharing_rechecker': {
        #    'task': 'web.tasks.soc_sharing.rechek_manager',
        #    'schedule': crontab(minute=0, hour='*/3'),
        #    'args': (),
        #},
        'mail_stack_sender': {
            'task': 'web.tasks.mail.mail_stack_sender',
            'schedule': crontab(minute='*/1'),
            'args': (),
        },
        'generate_blacklist': {
            'task': 'web.tasks.blacklist.generate_blacklist',
            'schedule': crontab(minute='*/1'),
            'args': (),
        },
        'generate_accounts': {
            'task': 'web.tasks.accounts_send.accounts_manager',
            'schedule': crontab(0, 0, 0, day_of_month='5'),
            'args': (),
        },
    }

    FAIL_PAYMENT_ALGORITHM = [
        dict(count=3, interval=5 * 60),
        dict(count=2, interval=60 * 60),
        dict(count=30, interval=24 * 60 * 60),
        dict(count=5, interval=7 * 24 * 60 * 60,
             start_interval=30 * 24 * 60 * 60),
    ]

    LOG_PATH = './logs'
    LOG_ENABLE = True
    LOG_LEVEL = 'DEBUG'
    LOG_MAX_SIZE = 1024 * 1024
    LOG_APP = ('api', 'web', 'model', 'task', 'payment')
    LOG_DEFAULT_HANFLERS = ['console', ]
    LOG_SETTINGS = {
        'version': 1,
        'formatters': {
            'default': {
                'format': '[%(levelname)s] [P:%(process)d] [%(asctime)s] %(pathname)s:%(lineno)d: %(message)s',
                'datefmt': '%d/%b/%Y %H:%M:%S',
            },
            'simple': {
                'format': '[%(levelname)s] [%(asctime)s] %(message)s',
                'datefmt': '%d/%b/%Y %H:%M:%S',
            },
        },
        'handlers': {
            'console': {
                'level': 'DEBUG',
                'class': 'logging.StreamHandler',
                'formatter': 'default',
            },
            'file': {
                'level': LOG_LEVEL,
                'class': 'logging.handlers.RotatingFileHandler',
                'formatter': 'simple',
                'encoding': 'utf8',
                'maxBytes': LOG_MAX_SIZE,
                'backupCount': 20,
                'filename': "%s/all.log" % LOG_PATH
            }
        },
        'loggers': {
            '': {
                'level': LOG_LEVEL,
                'handlers': ['console', 'file']
            }
        }
    }


class ProductionConfig(Config):
    SQLALCHEMY_ECHO = False
    SQLALCHEMY_RECORD_QUERIES = True


class DevelopmentConfig(Config):
    SQLALCHEMY_ECHO = True
    DEBUG = True
    SQLALCHEMY_RECORD_QUERIES = True
